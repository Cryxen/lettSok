@using BlazorView.Pages.Components
@using BlazorView.Data
@using Newtonsoft.Json

@inject FetchUserFromDb UserListingService
@inject ILogger<Index> Logger
@page "/"

<PageTitle>Index</PageTitle>

<div class="contentWrapper">
    <p>@FullListingStyle</p>
        
            <DisplayFullListing AdvertisementToShow="@AdvertisementToShow" FullListingStyle="@FullListingStyle" ShowFullAdvertisement="@ShowFullAdvertisement"/>
        
    <h1>ANGSTFRI JOBBSØKING</h1>
    <picture>
        <img src="img/logo.png" class="logo" />
    </picture>
    <EditForm Model="@_searchModel" class="searchForm" name="searchForm">
        <input type="text" placeholder="Søk her" @bind-value="SearchValue" @bind-value:event="oninput" />
        <button @onclick="SearchPress">Søk</button>
    </EditForm>

    @if (ShowSearch)
    {
        <section class="listings">
            <FetchListings SearchValue="@SearchValue.ToUpper()" AdvertisementToShow="@ShowFullListing" />
        </section>
    }
</div>


@code{


    int Counter = 0;
    bool ShowSearch = false;
    Advertisement? AdvertisementToShow;
    string FullListingStyle;

    /// <summary>
    /// Used by EditForm
    /// </summary>
    private class SearchModel
    {
        public SearchModel()
        {
        }
    }
    private SearchModel _searchModel = new();

    // Value of search field
    string? SearchValue = "";
    string? TempSearch = "";

    /// <summary>
    /// Method being used when search button is pressed.
    /// </summary>
    private void SearchPress()
    {
        ShowSearch ^= true;
    }

    //Interests
    string? InterestsFromDb;
    IEnumerable<Interest> Interests = new List<Interest>();
    List<string> CommonInterests = new List<string>();

    //Uninterests
    string? UninterestsFromDb;
    IEnumerable<Interest> Uninterests = new List<Interest>();
    List<string> CommonUninterests = new List<string>();

    //Users
    IEnumerable<User> Users = new List<User>();
    string UsersFromDb;

    private async Task ShowFullListing(Advertisement advertisement)
    {
        Logger.LogDebug("Showing the full listing, time: {time}", DateTimeOffset.Now);
        AdvertisementToShow = advertisement;
        FullListingStyle = "visibility: visible;";
        TempSearch = SearchValue;
        TempSearch = "";
    }

    private async Task ShowFullAdvertisement()
    {
        FullListingStyle = "visibility: hidden;";
        SearchValue = TempSearch;

    }

}