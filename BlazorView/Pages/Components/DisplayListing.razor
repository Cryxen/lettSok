@using BlazorView.Data
@inject FetchUserFromDb userFromDb
@inject ILogger<DisplayListing> logger

@if (showListing && !LoggedInUserService.uninterests.Contains(item.Uuid))
    {    
    <section class="listing">
        <button @onclick="showFullListing" type="button" class="listingTitle">
            @item.Title
        </button>
        
        @if (LoggedInUserService.interests.Contains(item.Uuid))
        {
            <button @onclick="deleteLikes">Likt</button>

        }
        else
        {
            <button @onclick="saveLikes">Liker</button>
        }
        @if (LoggedInUserService.uninterests.Contains(item.Uuid))
        {
        <button @onclick="deleteNotLikes">Markert ikke likt</button>
        }
        else {
        <button @onclick="saveNotLikes">Liker ikke</button>
        }
    </section>
    }


@code {
    bool showListing = true;

    [Parameter]
    public Advertisement? item { get; set; }

    [Parameter]
    public EventCallback<Advertisement> advertisementToShow { get; set; }

    [Parameter]
    public bool showFullAdvertisement { get; set; }
    private void saveLikes()
    {
        logger.LogInformation("Saving advertisement Uuid: {0} and User Id: {1} as a new interest, time: {time}", item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);
        showListing = false;

        //Interests
        Interest interest = new();
        interest.userGuid = LoggedInUserService.Id;
        interest.advertisementUuid = item.Uuid;

        userFromDb.PostInterest(interest);
        LoggedInUserService.interests.Add(item.Uuid);
        Task.Delay(5);
        showListing = true;
    }

    private void saveNotLikes()
    {
        logger.LogInformation("Saving advertisement Uuid: {0} and User Id: {1} as a new Uninterest, time: {time}", item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);

        showListing = false;

        //Interests
        Interest interest = new();
        interest.userGuid = LoggedInUserService.Id;
        interest.advertisementUuid = item.Uuid;

        userFromDb.PostUninterest(interest);
        LoggedInUserService.uninterests.Add(item.Uuid);
        Task.Delay(5);
        showListing = true;
    }

    private void deleteNotLikes()
    {
        logger.LogInformation("Deleting advertisement Uuid: {0} and User Id: {1} as an uninterest, time: {time}", item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);

        showListing = false;

        Interest interest = new();
        interest.userGuid = LoggedInUserService.Id;
        interest.advertisementUuid = item.Uuid;

        userFromDb.DeleteUninterest(interest);
        LoggedInUserService.uninterests.Remove(item.Uuid);
        Task.Delay(5);
        showListing = true;
    }

    private void deleteLikes()
    {
        logger.LogInformation("Deleting advertisement Uuid: {0} and User Id: {1} as an interest, time: {time}", item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);

        showListing = false;

        Interest interest = new();
        interest.userGuid = LoggedInUserService.Id;
        interest.advertisementUuid = item.Uuid;

        userFromDb.DeleteInterest(interest);
        LoggedInUserService.interests.Remove(item.Uuid);
        Task.Delay(5);
        showListing = true;
    }

    private async void showFullListing()
    {
        showFullAdvertisement = true;
        await advertisementToShow.InvokeAsync(item);
    }
}

