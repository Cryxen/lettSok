@using BlazorView.Data
@inject FetchUserFromDb UserFromDb
@inject ILogger<DisplayListing> Logger

@if (_showListing && !LoggedInUserService.Uninterests.Contains(Item.Uuid))
    {    
    <section class="listing">
        <button @onclick="ShowFullListing" type="button" class="listingTitle">
            @Item.Title
        </button>
        
        @if (LoggedInUserService.Interests.Contains(Item.Uuid))
        {
            <button @onclick="deleteLikes" class="advButton">
                <img src="img/heart2.png" alt="Likt" />
            </button>

        }
        else
        {
            <button @onclick="SaveLikes" class="advButton">
                <img src="img/like2.png" alt="Liker"/>
            </button>
        }
        @if (LoggedInUserService.Uninterests.Contains(Item.Uuid))
        {
        <button @onclick="DeleteNotLikes" class="advButton">Markert ikke likt</button>
        }
        else {
    <button @onclick="SaveNotLikes" class="advButton">
        <img src="img/not_like2.png" alt="Liker ikke" />
    </button>
        }
    </section>
    }


@code {
    private bool _showListing = true;

    [Parameter]
    public Advertisement? Item { get; set; }

    [Parameter]
    public EventCallback<Advertisement> AdvertisementToShow { get; set; }

    [Parameter]
    public bool ShowFullAdvertisement { get; set; }
    private void SaveLikes()
    {
        Logger.LogInformation("Saving advertisement Uuid: {0} and User Id: {1} as a new interest, time: {time}", Item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);
        _showListing = false;

        //Interests
        Interest interest = new();
        interest.UserGuid = LoggedInUserService.Id;
        interest.AdvertisementUuid = Item.Uuid;

        UserFromDb.PostInterest(interest);
        LoggedInUserService.Interests.Add(Item.Uuid);
        Task.Delay(5);
        _showListing = true;
    }

    private void SaveNotLikes()
    {
        Logger.LogInformation("Saving advertisement Uuid: {0} and User Id: {1} as a new Uninterest, time: {time}", Item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);

        _showListing = false;

        //Interests
        Interest Interest = new();
        Interest.UserGuid = LoggedInUserService.Id;
        Interest.AdvertisementUuid = Item.Uuid;

        UserFromDb.PostUninterest(Interest);
        LoggedInUserService.Uninterests.Add(Item.Uuid);
        Task.Delay(5);
        _showListing = true;
    }

    private void DeleteNotLikes()
    {
        Logger.LogInformation("Deleting advertisement Uuid: {0} and User Id: {1} as an uninterest, time: {time}", Item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);

        _showListing = false;

        Interest Interest = new();
        Interest.UserGuid = LoggedInUserService.Id;
        Interest.AdvertisementUuid = Item.Uuid;

        UserFromDb.DeleteUninterest(Interest);
        LoggedInUserService.Uninterests.Remove(Item.Uuid);
        Task.Delay(5);
        _showListing = true;
    }

    private void deleteLikes()
    {
        Logger.LogInformation("Deleting advertisement Uuid: {0} and User Id: {1} as an interest, time: {time}", Item.Uuid, LoggedInUserService.Id, DateTimeOffset.Now);

        _showListing = false;

        Interest interest = new();
        interest.UserGuid = LoggedInUserService.Id;
        interest.AdvertisementUuid = Item.Uuid;

        UserFromDb.DeleteInterest(interest);
        LoggedInUserService.Interests.Remove(Item.Uuid);
        Task.Delay(5);
        _showListing = true;
    }

    private async void ShowFullListing()
    {
        ShowFullAdvertisement = true;
        await AdvertisementToShow.InvokeAsync(Item);
    }
}

