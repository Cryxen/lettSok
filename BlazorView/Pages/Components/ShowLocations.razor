@using BlazorView.Data
@using Newtonsoft.Json

@inject FetchLocationsFromDb LocationService
@inject ILogger<ShowLocations> Logger

<section>
    @if (_locations != null)
    {
        <EditForm Model="_locationModel">
            <select @bind="_selectedLocation">
                <option value="">Velg kommune</option>
                @foreach (var Item in _locations)
                {
                    @if (!_prefferedLocations.Any(i => i.LocationId == Item.Id))
                    {
                        <option value="@Item.Id">@Item.Municipality</option>
                    }
                }
            </select>
            <button @onclick="SelectLocation">Velg kommune</button>

        </EditForm>
    }
    else
    {
            
        <p>Det er dessverre utfordringer med å nå Databasen som holder på lokasjoner. Vennligst prøv igjen senere.</p>

    }

    <h5>Lokasjoner lagt til:</h5>
    @if (_locations != null)
    {
        @foreach (var Item in _locations)
        {
            @if (_loggedInUserPrefferedLocations.Any(i => i.LocationId == Item.Id))
            {
                    <table>
                        <tr>
                            <td>@Item.Municipality</td>
                            <td><button @onclick="() => DeletePreferredLocation(Item)">Slett</button></td>
                        </tr>
                    </table>
     
                

            }
        }
    }
    else
    {
        <p>Det er dessverre utfordringer med å nå Databasen som holder på lokasjoner. Vennligst prøv igjen senere.</p>

    }

</section>
@code {
    [Parameter]
    public EventCallback<bool> ShowAllLocations { get; set; }


    private class LocationModel
    {

    }
    private LocationModel _locationModel = new();
    private int _selectedLocation;

    // List of municipalities in Norway
    private string? _locationsFromDb;
    private IEnumerable<Location> _locations = new List<Location>();


    // List of municipalities marked as favorable
    private string? _preferredLocationsFromDb;
    private IEnumerable<PreferredLocation> _prefferedLocations = new List<PreferredLocation>();
    private List<PreferredLocation> _loggedInUserPrefferedLocations = new List<PreferredLocation>();


    protected override async Task OnInitializedAsync()
    {

        // Fetch list of municipalities in Norway from db
        Logger.LogInformation("Fetching list of municipalities in Norway from Database, time: {time}", DateTimeOffset.Now);
        _locationsFromDb = await LocationService.FetchLocations();
        _locations = JsonConvert.DeserializeObject<IEnumerable<Location>>(_locationsFromDb);

        // Fetch list of preferred municipalities in Norway from db
        Logger.LogInformation("Fetching list of preferred municipalities in Norway from Database, time: {time}", DateTimeOffset.Now);
        _preferredLocationsFromDb = await LocationService.FetchPreferredLocations();
        _prefferedLocations = JsonConvert.DeserializeObject<IEnumerable<PreferredLocation>>(_preferredLocationsFromDb);

        if (_prefferedLocations != null)
        {
            foreach (var Item in _prefferedLocations)
            {
                if (Item.UserId == LoggedInUserService.Id)
                {
                    _loggedInUserPrefferedLocations.Add(Item);
                }
            }
        }

    }

    private async void SelectLocation()
    {
        PreferredLocation preferredLocation = new();
        preferredLocation.UserId = LoggedInUserService.Id;
        preferredLocation.LocationId = _selectedLocation;
        Logger.LogInformation("Saving new preferred location to Database, Location Id: {0}, User Id: {1}, Time: {time}", preferredLocation.LocationId, preferredLocation.UserId, DateTimeOffset.Now);

        LocationService.PostPreferredLocation(preferredLocation);
        _prefferedLocations.Append(preferredLocation);

        await ShowAllLocations.InvokeAsync();
    }

    private async void DeletePreferredLocation(Location location)
    {
        PreferredLocation preferredLocation = new();
        preferredLocation.LocationId = location.Id;
        preferredLocation.UserId = LoggedInUserService.Id;
        Logger.LogInformation("Deleting preferred location to Database, Location Id: {0}, User Id: {1}, Time: {time}", preferredLocation.LocationId, preferredLocation.UserId, DateTimeOffset.Now);

        LocationService.DeletePreferredLocation(preferredLocation);
        await ShowAllLocations.InvokeAsync();
    }
}

