@using BlazorView.Data
@using Newtonsoft.Json

@inject FetchLocationsFromDb LocationService
@inject ILogger<ShowLocations> logger

<h3>Kommuner:</h3>
<section>
    @if (locations != null)
    {
        <EditForm Model="locationModel">
            <select @bind="selectedLocation">
                <option value="">Velg kommune</option>
                @foreach (var item in locations)
                {
                    @if (!prefferedLocations.Any(i => i.LocationId == item.Id))
                    {
                        <option value="@item.Id">@item.Municipality</option>
                    }
                }
            </select>
            <button @onclick="selectLocation">Velg kommune</button>

        </EditForm>
    }
    else
    {
        <p>Det er dessverre utfordringer med å nå Databasen som holder på lokasjoner. Vennligst prøv igjen senere.</p>

    }

    <p>Lokasjoner lagt til:</p>
    @if (locations != null)
    {
        @foreach (var item in locations)
        {
            @if (loggedInUserPrefferedLocations.Any(i => i.LocationId == item.Id))
            {
                <p>@item.Municipality</p>
                <button @onclick="() => DeletePreferredLocation(item)">Slett</button>

            }
        }
    }
    else
    {
        <p>Det er dessverre utfordringer med å nå Databasen som holder på lokasjoner. Vennligst prøv igjen senere.</p>

    }

</section>
@code {
    [Parameter]
    public EventCallback<bool> showLocations { get; set; }


    private class LocationModel
    {

    }
    LocationModel locationModel = new();
    int selectedLocation;

    // List of municipalities in Norway
    string? locationsFromDb;
    IEnumerable<Location> locations = new List<Location>();


    // List of municipalities marked as favorable
    string? preferredLocationsFromDb;
    IEnumerable<PreferredLocation> prefferedLocations = new List<PreferredLocation>();
    List<PreferredLocation> loggedInUserPrefferedLocations = new List<PreferredLocation>();


    protected override async Task OnInitializedAsync()
    {

        // Fetch list of municipalities in Norway from db
        logger.LogInformation("Fetching list of municipalities in Norway from Database, time: {time}", DateTimeOffset.Now);
        locationsFromDb = await LocationService.FetchLocations();
        locations = JsonConvert.DeserializeObject<IEnumerable<Location>>(locationsFromDb);

        // Fetch list of preferred municipalities in Norway from db
        logger.LogInformation("Fetching list of preferred municipalities in Norway from Database, time: {time}", DateTimeOffset.Now);
        preferredLocationsFromDb = await LocationService.FetchPreferredLocations();
        prefferedLocations = JsonConvert.DeserializeObject<IEnumerable<PreferredLocation>>(preferredLocationsFromDb);

        if (prefferedLocations != null)
        {
            foreach (var item in prefferedLocations)
            {
                if (item.UserId == LoggedInUserService.Id)
                {
                    loggedInUserPrefferedLocations.Add(item);
                }
            }
        }

    }

    private async void selectLocation()
    {
        PreferredLocation preferredLocation = new();
        preferredLocation.UserId = LoggedInUserService.Id;
        preferredLocation.LocationId = selectedLocation;
        logger.LogInformation("Saving new preferred location to Database, Location Id: {0}, User Id: {1}, Time: {time}", preferredLocation.LocationId, preferredLocation.UserId, DateTimeOffset.Now);

        LocationService.PostPreferredLocation(preferredLocation);
        prefferedLocations.Append(preferredLocation);

        await showLocations.InvokeAsync();
    }

    private async void DeletePreferredLocation(Location location)
    {
        PreferredLocation preferredLocation = new();
        preferredLocation.LocationId = location.Id;
        preferredLocation.UserId = LoggedInUserService.Id;
        logger.LogInformation("Deleting preferred location to Database, Location Id: {0}, User Id: {1}, Time: {time}", preferredLocation.LocationId, preferredLocation.UserId, DateTimeOffset.Now);

        LocationService.DeletePreferredLocation(preferredLocation);
        await showLocations.InvokeAsync();
    }
}

