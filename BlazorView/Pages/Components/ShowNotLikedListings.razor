@using BlazorView.Data
@using Newtonsoft.Json
@inject FetchJobListingsFromDb JobListingsService
@inject FetchUserFromDb UserListingService
@inject ILogger<ShowNotLikedListings> Logger

@if (AdvertisementList != null)
{
    @foreach (var Item in AdvertisementList)
    {
        if (LoggedInUserService.Uninterests.Contains(Item.Uuid))
        {
                <table>
                    <tr>
                        <td>@Item.Title</td>
                        <td><button @onclick="() => RemoveFromUninterests(Item)">Slett</button></td>
                    </tr>
                </table>
        }
    }
    }
    else
    {
        <p>Det er dessverre utfordringer med å nå Databasen som holder på ledige stillinger. Vennligst prøv igjen senere.</p>
    }

@if (LoggedInUserService.Uninterests == null || LoggedInUserService.Uninterests.Count() == 0)
{
    <p> Ingen stillinger er markert som ikke likt.</p>
}
@code {

    IEnumerable<Advertisement> AdvertisementList = new List<Advertisement>();
    string AdvertisementsFromDb;



    //Uninterests
    string? UninterestsFromDb;
    IEnumerable<Interest> Uninterests = new List<Interest>();
    List<string> CommonUninterests = new List<string>();

    /// <summary>
    /// Fetch job listings from database
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        AdvertisementsFromDb = await JobListingsService.FetchJobListings();
        AdvertisementList = JsonConvert.DeserializeObject<IEnumerable<Advertisement>>(AdvertisementsFromDb);

        // Fetch uninterests TODO: Try to make this global at some point
        Logger.LogInformation("Get uninterests from Database, time: {time}", DateTimeOffset.Now);
        UninterestsFromDb = await UserListingService.FetchUninterest();
        Uninterests = JsonConvert.DeserializeObject<IEnumerable<Interest>>(UninterestsFromDb);

        if (Uninterests != null)
        {
            foreach (var Item in Uninterests)
            {
                if (Item.UserGuid == LoggedInUserService.Id)
                {
                    CommonUninterests.Add(Item.AdvertisementUuid);
                }
            }
            LoggedInUserService.Uninterests = CommonUninterests;
        }

    }

    private void RemoveFromUninterests(Advertisement advertisement)
    {
        Interest Interest = new();
        Interest.UserGuid = LoggedInUserService.Id;
        Interest.AdvertisementUuid = advertisement.Uuid;
        Logger.LogInformation("Deleting uninterest from Database, Advertisement Uuid: {0}, User Id: {1}, Time: {time}", Interest.AdvertisementUuid, Interest.UserGuid, DateTimeOffset.Now);

        UserListingService.DeleteUninterest(Interest);
        LoggedInUserService.Uninterests.Remove(advertisement.Uuid);
    }
}

