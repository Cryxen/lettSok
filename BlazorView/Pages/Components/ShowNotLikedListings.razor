@using BlazorView.Data
@using Newtonsoft.Json
@inject FetchJobListingsFromDb JobListingsService
@inject FetchUserFromDb UserListingService
@inject ILogger<ShowNotLikedListings> logger

@if (advertisementList != null)
{
    @foreach (var item in advertisementList)
    {
        if (LoggedInUserService.uninterests.Contains(item.Uuid))
        {
                <table>
                    <tr>
                        <td>@item.Title</td>
                        <td><button @onclick="() => RemoveFromUninterests(item)">Slett</button></td>
                    </tr>
                </table>
        }
    }
    }
    else
    {
        <p>Det er dessverre utfordringer med å nå Databasen som holder på ledige stillinger. Vennligst prøv igjen senere.</p>
    }

@if (LoggedInUserService.uninterests == null || LoggedInUserService.uninterests.Count() == 0)
{
    <p> Ingen stillinger er markert som ikke likt.</p>
}
@code {

    IEnumerable<Advertisement> advertisementList = new List<Advertisement>();
    string advertisementsFromDb;



    //Uninterests
    string? uninterestsFromDb;
    IEnumerable<Interest> uninterests = new List<Interest>();
    List<string> commonUninterests = new List<string>();

    /// <summary>
    /// Fetch job listings from database
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        advertisementsFromDb = await JobListingsService.FetchJobListings();
        advertisementList = JsonConvert.DeserializeObject<IEnumerable<Advertisement>>(advertisementsFromDb);

        // Fetch uninterests TODO: Try to make this global at some point
        logger.LogInformation("Get uninterests from Database, time: {time}", DateTimeOffset.Now);
        uninterestsFromDb = await UserListingService.FetchUninterest();
        uninterests = JsonConvert.DeserializeObject<IEnumerable<Interest>>(uninterestsFromDb);

        if (uninterests != null)
        {
            foreach (var item in uninterests)
            {
                if (item.userGuid == LoggedInUserService.Id)
                {
                    commonUninterests.Add(item.advertisementUuid);
                }
            }
            LoggedInUserService.uninterests = commonUninterests;
        }

    }

    private void RemoveFromUninterests(Advertisement advertisement)
    {
        Interest interest = new();
        interest.userGuid = LoggedInUserService.Id;
        interest.advertisementUuid = advertisement.Uuid;
        logger.LogInformation("Deleting uninterest from Database, Advertisement Uuid: {0}, User Id: {1}, Time: {time}", interest.advertisementUuid, interest.userGuid, DateTimeOffset.Now);

        UserListingService.DeleteUninterest(interest);
        LoggedInUserService.uninterests.Remove(advertisement.Uuid);
    }
}

